from aiogram import Bot, Dispatcher, types, executor
from keyboards import kb, kb1, ikb1, ikb2, ikb3, ikb3__1
import random
import string
from Data_output import output
import asyncio
from undetected_driver import take_html
from database import drop
import os

TEXT = """
–ö–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞\(–ò–ª–∏ —Å–ª–µ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ\)

/random \- —Ä–∞–Ω–¥–æ–º–Ω–∞—è –±—É–∫–≤–∞
/start \- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/description \- –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –º–æ–π –≤–∫
/sticker \- –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
/idsticker \- –ø–æ–ª—É—á–∏—Ç—å id —Å—Ç–∏–∫–µ—Ä–∞ \(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\)
/meme \- –æ—Ç–ø—Ä–∞–≤–∏—Ç –º–µ–º–∞—Å
/parser \- –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä
"""
sent_sticker = False
bot = Bot(token='6249292999:AAFK1mI59IrKMvlC8JRWbIAilp8nbOG_lUQ')
dp = Dispatcher(bot)


async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


@dp.message_handler(commands=['start'])
async def help_command(message: types.Message):
    await message.answer(text='*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' + TEXT,
                         parse_mode=types.ParseMode.MARKDOWN_V2,
                         reply_markup=kb)


@dp.message_handler(commands=['description'])
async def desc_comm(message: types.Message):
    await message.answer(text='–≠—Ç–æ—Ç –±–æ—Ç \- –º–æ–π –ø–µ—Ç –ø—Ä–æ–µ–∫—Ç, —è —Å—é–¥–∞ —Å—É—é –≤—Å—ë —á–µ–º—É —É—á—É—Å—å',
                         parse_mode=types.ParseMode.MARKDOWN_V2,
                         reply_markup=ikb1)
    await message.answer('—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞', reply_markup=kb1)


@dp.message_handler(commands=['random'])
async def random_letter(message: types.Message):
    await message.answer(random.choice(string.ascii_letters))


@dp.message_handler(commands=['sticker'])
async def random_letter(message: types.Message):
    await message.answer(text='–ß–µ–ª, —Ç–≤–æ—è –ø—Ä–æ—Å—å–±–∞ —ç—Ç–æ')
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEH2V5j9a3kDUz4DO5rCDzQ6R21zrGrjQACIQADumTPDwIruQwj7FhxLgQ")


"""@dp.message_handler(commands=['idsticker'])
async def handle_sticker_command(message: types.Message):
    await message.answer("–ù—É –¥–∞–≤–∞–π —Ç–≤–æ–π —Å—Ç–∏–∫–µ—Ä...")

    # Use another handler to wait for a sticker message
    @dp.message_handler(content_types=types.ContentTypes.STICKER)
    async def handle_sticker(message: types.Message):
        # Get the sticker ID and send it as a message
        sticker_id = message.sticker.file_id
        await message.answer(f"ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ - {sticker_id}")


    # Use another handler to wait for a non-sticker message
    @dp.message_handler(content_types=types.ContentTypes.ANY)
    async def handle_non_sticker(message: types.Message):
        # Send an error message and ask for a sticker again
        await message.answer("–ß–µ–ª, —Ç—ã –¥—É—Ä–∞–∫? —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–π –∏–ª–∏ –æ—Ç–≤–∞–ª–∏... (–í–≤–æ–¥–∏ –∑–∞–Ω–æ–≥–æ /idsticker)")"""


@dp.message_handler(commands=['meme'])
async def random_letter(message: types.Message):
    await bot.send_photo(message.from_user.id,
                         photo='https://i.imgur.com/aLhAw5a.png',
                         reply_markup=ikb2)


parsing_mode = False
continue_parsing = False

@dp.message_handler(commands=['parser'])
async def random_letter(message: types.Message):
    global parsing_mode
    parsing_mode = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å\n(–µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–ø–∏—à–∏ stop)")

@dp.callback_query_handler()
async def random_callback(callback: types.CallbackQuery):
    match callback.data:
        case 'crandom':
            await callback.message.answer(random.choice(string.ascii_letters))
            await callback.message.delete()
        case 'backstart':
            await help_command(callback.message)
            await callback.message.delete()
            await drop()
        case 'next5elem':
            global continue_parsing
            continue_parsing = True
            await callback.message.delete()

@dp.message_handler()
async def answer(message: types.Message):
    await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥ 7 —Ç–æ –Ω–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ /parser")
    global parsing_mode
    if parsing_mode:
        if message.text.lower() == 'stop'.lower():
            parsing_mode = False
            await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return  # Add this line to exit the function
        take_html(message.text)
        data = output()
        ln = len(data)
        for idx, count in enumerate(data):
            await bot.send_photo(chat_id=message.chat.id,
                                 photo=count['picture_link'],
                                 caption=(
                                     f'{count["name"]}\n\n'
                                     f'üí∞–¶–µ–Ω–∞: {count["price"]} —Ä—É–±–ª–µ–π\n'
                                     f'‚≠ê–†–µ–π—Ç–∏–Ω–≥: {count["rating"]}\n'
                                     f'üìî–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {count["num_revives"]}\n'
                                     f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{count["product_link"]}'
                                 ))
            if idx % 5 == 4:
                global continue_parsing
                await message.answer(text=f'–ü–æ–∫–∞–∑–∞–Ω–æ {idx+1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {ln}', reply_markup=ikb3)
                continue_parsing = False
                while not continue_parsing:
                    await asyncio.sleep(1)
                if continue_parsing is True:
                    continue
            parsing_mode = False
        await message.answer(text="–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã", reply_markup=ikb3__1)
        await drop()
    else:
        await message.answer(text="–Ø –Ω–µ —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∫–∞ —á—Ç–æ, —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
